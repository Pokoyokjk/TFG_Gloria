
import jwt
import os
from dotenv import dotenv_values
from datetime import datetime, timedelta, timezone
from utils.credentials import Role
import sys

if __name__ == "__main__":
    # Check if a .env file path is provided as a command-line argument
    env_file = sys.argv[1] if len(sys.argv) > 1 else ".env"
    # Load environment variables from the .env file without overriding existing ones in the environment
    CONFIG = dotenv_values(env_file)

    # This must be generated with the command:
    # openssl rand -hex 32
    SECRET_KEY = CONFIG.get("SECRET_KEY", None)
    ALGORITHM = "HS256"
    ACCESS_TOKEN_EXPIRE_WEEKS = 50

    expire = datetime.now(timezone.utc) + timedelta(weeks=ACCESS_TOKEN_EXPIRE_WEEKS)

    # Generate tokens for different users

    # Auditor Role
    auditor_user = {
        "username": "auditor_user",
        "name": "Auditor User Name",
        "roles": [Role.AUDITOR.value],
        "exp": expire
    }
    auditor_token = jwt.encode(auditor_user, SECRET_KEY, algorithm=ALGORITHM)

    # Logger Role
    logger_user = {
        "username": "logger_user",
        "name": "Logger User Name",
        "roles": [Role.LOGGER.value],
        "exp": expire
    }
    logger_token = jwt.encode(logger_user, SECRET_KEY, algorithm=ALGORITHM)

    # Auditor/Logger Role
    auditor_logger_user = {
        "username": "auditor_logger_user",
        "name": "Auditor Logger User Name",
        "roles": [Role.AUDITOR.value, Role.LOGGER.value],
        "exp": expire
    }
    auditor_logger_token = jwt.encode(auditor_logger_user, SECRET_KEY, algorithm=ALGORITHM)

    # Admin Role
    admin_user = {
        "username": "admin_user",
        "name": "Admin User Name",
        "roles": [Role.ADMIN.value],
        "exp": expire
    }
    admin_token = jwt.encode(admin_user, SECRET_KEY, algorithm=ALGORITHM)

    # All Roles (equivalent to Admin)
    all_roles_user = {
        "username": "full_admin_user",
        "name": "Full Admin User Name",
        "roles": [role.value for role in Role],
        "exp": expire
    }
    all_roles_token = jwt.encode(all_roles_user, SECRET_KEY, algorithm=ALGORITHM)

    # Open the .env file in write mode
    with open(env_file, "a") as file:
        # Write the tokens to the .env file
        file.write(f"\n# Tokens generated by {os.path.basename(__file__)} with the secret: {SECRET_KEY}\n")
        file.write(f"AUDITOR_TOKEN={auditor_token}\n")
        file.write(f"LOGGER_TOKEN={logger_token}\n")
        file.write(f"AUDITOR_LOGGER_TOKEN={auditor_logger_token}\n")
        file.write(f"ADMIN_TOKEN={admin_token}\n")
        file.write(f"ALL_ROLES_TOKEN={all_roles_token}\n")
        file.write(f"# End of tokens generated by {os.path.basename(__file__)} with the secret: {SECRET_KEY}\n")

        print(f"Tokens written to {env_file} file.")
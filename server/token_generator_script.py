
import jwt
import os
from dotenv import load_dotenv
from datetime import datetime, timedelta, timezone
from utils.credentials import Role
import sys

# Check if a .env file path is provided as a command-line argument
env_file = sys.argv[1] if len(sys.argv) > 1 else ".env"
# Load environment variables from a .env file
load_dotenv(env_file)
# This must be generated with the command:
# openssl rand -hex 32
SECRET_KEY = os.getenv("SECRET_KEY", None)
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_WEEKS = 50

expire = datetime.now(timezone.utc) + timedelta(weeks=ACCESS_TOKEN_EXPIRE_WEEKS)

# Generate tokens for different users

# Reader Role
reader_user = {
    "username": "reader_user",
    "name": "Reader User Name",
    "roles": [Role.READER.value],
    "exp": expire
}
reader_token = jwt.encode(reader_user, SECRET_KEY, algorithm=ALGORITHM)

# Logger Role
logger_user = {
    "username": "logger_user",
    "name": "Logger User Name",
    "roles": [Role.LOGGER.value],
    "exp": expire
}
logger_token = jwt.encode(logger_user, SECRET_KEY, algorithm=ALGORITHM)

# Reader/Logger Role
reader_logger_user = {
    "username": "reader_logger_user",
    "name": "Reader Logger User Name",
    "roles": [Role.READER.value, Role.LOGGER.value],
    "exp": expire
}
reader_logger_token = jwt.encode(reader_logger_user, SECRET_KEY, algorithm=ALGORITHM)

# Admin Role
admin_user = {
    "username": "admin_user",
    "name": "Admin User Name",
    "roles": [Role.ADMIN.value],
    "exp": expire
}
admin_token = jwt.encode(admin_user, SECRET_KEY, algorithm=ALGORITHM)

# All Roles (equivalent to Admin)
all_roles_user = {
    "username": "full_admin_user",
    "name": "Full Admin User Name",
    "roles": [role.value for role in Role],
    "exp": expire
}
all_roles_token = jwt.encode(all_roles_user, SECRET_KEY, algorithm=ALGORITHM)

# Open the .env file in write mode
with open(env_file, "a") as file:
    # Write the tokens to the .env file
    file.write(f"\n# Tokens generated by {os.path.basename(__file__)} with the secret: {SECRET_KEY}\n")
    file.write(f"READER_TOKEN={reader_token}\n")
    file.write(f"LOGGER_TOKEN={logger_token}\n")
    file.write(f"READER_LOGGER_TOKEN={reader_logger_token}\n")
    file.write(f"ADMIN_TOKEN={admin_token}\n")
    file.write(f"ALL_ROLES_TOKEN={all_roles_token}\n")
    file.write(f"# End of tokens generated by {os.path.basename(__file__)} with the secret: {SECRET_KEY}\n")

    print(f"Tokens written to {env_file} file.")

# Unset the SECRET_KEY environment variable for security
os.environ.pop("SECRET_KEY", None)